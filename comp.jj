PARSER_BEGIN(comp)
package Comp;
import java.io.*;
class comp 
{
	static String nombre;
	static String tipo;
	static String atributo;
	public static void main( String[] args )throws ParseException, Exception
	{
		try{
			Ventana ven = new Ventana("Compilador");	
		}catch(Exception e){
			Ventana.t2.setText(e.getMessage());
		}
		
		
	}
}
PARSER_END(comp)



TOKEN:
{
	<Mayor: ">">//1
	| <Menor : "<" >//2
	| <MayorIgual:">=">//3
	| <MenorIgual:"<="> //4
	| <Comparacion: "==" >//5
	| <Diferente: "!=" >//6
	| <Asignacion: "=" >//7
	| <Mas : "+" >//8
	| <Menos:"-">//9
    | <ParAP: "(" >//10
	| <ParCi: ")" > //11
	| <Izq: "{" >//12
	| <Der: "}" > //13
	| <SEMICOLON: ";" >//14
	| <PUBLIC: "public">//15
	| <clase: "class">//16
	| <PRIVATE: "private"> //17
	| <False: "false"> //18
	| <True: "true">//19
	| <integer : "int"> //20
	| <If : "if"> //21
	| <Boolean : "boolean"> //22
	| <Int : (["0"-"9"])+>//23
	| <IDENTIFIER : ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","_"])*> //24
}

SKIP : 
{ 
	" "|"\n" | "\r" | "\r\n" | "\t"
}
void Programa() :
{
	
}
{	
	modifi()
	({atributo=token.image;})
	<clase>
	({tipo=token.image;})
	<IDENTIFIER>
	({nombre=token.image;})
	({Simbolo n  = new Simbolo(nombre,tipo,atributo);})
	({Ventana.tabla.put(nombre,n);})
	
	
	<Izq>		
	(field_declaration())*
	(if_statement()	)*
	<Der>	
}
void modifi() :
{}
{
(<PUBLIC>|<PRIVATE>	)		
}
void field_declaration():
{}
{
	variable_declaration()
	
}
void variable_declaration():
{	
}
{
	modifi()
	({atributo=token.image;})
	type()
	({tipo=token.image;})
	variable_declarator()	
	

	({Simbolo n  = new Simbolo(nombre,tipo,atributo);})
	({Ventana.tabla.put(nombre,n);})	

		
}
void type():
{}
{	
	type_specifier()					
}
void variable_declarator():
{}
{
	identi()
	({nombre=token.image;})
	(<SEMICOLON>|(<Asignacion> tipo()))
	
		
}
void tipo():
{}
{
	(<Int>|<True>|<False>)
	<SEMICOLON>	
	
}
void expression():
{}
{
	testing_expression()
	
}
void testing_expression():
{}
{
	or()
	(<Mayor>|<Menor>|<MenorIgual>|<MayorIgual>|<Comparacion>|<Diferente>)
	or()	
}
void or():
{}
{		
	(<Int>|identi())
}
void type_specifier():
{}
{		
	(<Boolean>|<integer>)
}
void if_statement():
{}
{	
		<If>		
		<ParAP>	
	expression()	
		<ParCi>	
	statement()	 
}
void statement():
{}
{
	 statement_block()
	
}
void statement_block():
{}
{
	
		 <Izq>	
		(aritmetica_expression())*
		 <Der>
	
	 
}
void aritmetica_expression():
{}
{	
		identi()
		<Asignacion>
		opint()
		<SEMICOLON>			 
}
void identi():
{}
{	
	<IDENTIFIER>	
			 		 
}
void opint():
{}
{
		(<Int>|identi())
		(<Mas>|<Menos>)
		(<Int>|identi())
}
void asignation():
{}
{		
	identi()
	<Asignacion>
	(<Int>|<True>|<False>)
	<SEMICOLON>	
}


